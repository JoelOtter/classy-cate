// Generated by CoffeeScript 1.6.2
(function() {
  var CLASSY_CATE_SCRIPT_VERSION, EXERCISES_PAGE_HTML, GRADES_PAGE_HTML, LAYOUT_HTML, MAIN_PAGE_HTML, activate_nostalgia_mode, extract_exercise_page_data, extract_grades_page_data, extract_main_page_data, initial_load, load_cate_page, load_css, load_dashboard_page, load_exercises_page, load_grades_page, populate_exercises_page, populate_grades_page, populate_html, populate_layout, populate_main_page, text_extract;

  LAYOUT_HTML = '<%= Rack::Utils.escape_html(haml :layout).gsub("\n", "") %>';

  MAIN_PAGE_HTML = '<%= Rack::Utils.escape_html(haml :main_page).gsub("\n", "") %>';

  GRADES_PAGE_HTML = '<%= Rack::Utils.escape_html(haml :grades_page).gsub("\n", "") %>';

  EXERCISES_PAGE_HTML = '<%= Rack::Utils.escape_html(haml :exercises_page).gsub("\n", "") %>';

  CLASSY_CATE_SCRIPT_VERSION = "1.2";

  populate_html = function(element, raw) {
    return $(element).html($("<div/>").html(raw).text());
  };

  activate_nostalgia_mode = function() {
    var nostalgia_colors;
    nostalgia_colors = ['Teal', 'DarkCyan', 'DeepSkyBlue', 'DarkTurquoise', 'MediumSpringGreen', 'Lime', 'SpringGreen', 'Aqua', 'Cyan', 'MidnightBlue', 'DodgerBlue', 'LightSeaGreen', 'Turquoise', 'RoyalBlue', 'SteelBlue', 'MediumTurquoise', 'CadetBlue', 'CornflowerBlue', 'MediumAquaMarine'];
    $('body, footer, div, span, td, input').each(function(index, elem) {
      var random_nostalgia_color;
      random_nostalgia_color = nostalgia_colors[Math.floor(Math.random() * nostalgia_colors.length)];
      return $(elem).css('background', random_nostalgia_color);
    });
    $('#old-cate-button').unbind();
    $('#old-cate-button').html("Mother of God, make it stop!");
    return $('#old-cate-button').bind('click', function() {
      return alert('Nope, you made your bed, now lie in it...');
    });
  };

  text_extract = function(html) {
    return html.text().trim().replace(/(\r\n|\n|\r)/gm, "");
  };

  load_cate_page = function(url, callback) {
    return $.ajax({
      type: 'GET',
      url: url,
      dataType: 'html',
      success: function(data) {
        var body, doc, frame;
        frame = $('<iframe class="hidden" src="about:blank"/>').hide();
        frame.appendTo('body');
        doc = frame.get(0).contentWindow.document;
        doc.write(data);
        body = $('body', doc).clone();
        frame.remove();
        return callback(body);
      }
    });
  };

  extract_main_page_data = function(html) {
    var available_years, candidate_number, category, cid, current_url, current_user, current_year, default_class, default_period, documentation_link, extensions_link, first_name, grading_schema_link, individual_records_link, keyt, last_name, login, other_func_links, personal_tutor, profile_fields, profile_image_src, projects_portal_link, timetable_url, version;
    current_url = document.URL;
    current_year = current_url.match("keyp=([0-9]+)")[1];
    current_user = current_url.match("[0-9]+:(.*)")[1];
    version = html.find('table:first td:first').text();
    profile_image_src = html.find('table:eq(2) table:eq(1) tr:eq(0) img').attr('src');
    profile_fields = html.find('table:eq(2) table:eq(1) tr:eq(1) td').map(function(i, e) {
      return $(e).text();
    });
    first_name = profile_fields[0];
    last_name = profile_fields[1];
    login = profile_fields[2];
    category = profile_fields[3];
    candidate_number = profile_fields[4];
    cid = profile_fields[5];
    personal_tutor = profile_fields[6];
    available_years = html.find('select[name=newyear] option').map(function(index, elem) {
      elem = $(elem);
      return {
        text: elem.html(),
        href: elem.attr('value')
      };
    });
    available_years = available_years.slice(1);
    other_func_links = html.find('table:eq(2) table:eq(9) tr td:nth-child(3) a').map(function(index, elem) {
      return $(elem).attr('href');
    });
    grading_schema_link = other_func_links[0];
    documentation_link = other_func_links[1];
    extensions_link = other_func_links[2];
    projects_portal_link = other_func_links[3];
    individual_records_link = other_func_links[4];
    default_class = html.find('input[name=class]:checked').val();
    default_period = html.find('input[name=period]:checked').val();
    keyt = html.find('input[type=hidden]').val();
    timetable_url = '/timetable.cgi?period=' + default_period + '&class=' + default_class + '&keyt=' + keyt;
    return {
      current_url: current_url,
      current_year: current_year,
      current_user: current_user,
      version: version,
      profile_image_src: profile_image_src,
      first_name: first_name,
      last_name: last_name,
      login: login,
      category: category,
      candidate_number: candidate_number,
      cid: cid,
      personal_tutor: personal_tutor,
      available_years: available_years,
      grading_schema_link: grading_schema_link,
      documentation_link: documentation_link,
      extensions_link: extensions_link,
      projects_portal_link: projects_portal_link,
      individual_records_link: individual_records_link,
      default_class: default_class,
      default_period: default_period,
      keyt: keyt,
      timetable_url: timetable_url
    };
  };

  extract_exercise_page_data = function(html) {
    var dates, extract_academic_years, extract_module_exercise_data, extract_start_end_dates, extract_term_title, modules, parseDate, process_exercises_from_cells, process_module_cell, tb, term_title, timetable;
    extract_term_title = function(html) {
      return html.find('tr').eq(0).find('h1').eq(0).text();
    };
    parseDate = function(input) {
      var parts;
      parts = input.match(/(\d+)/g);
      return new Date(parts[0], parts[1] - 1, parts[2]);
    };
    extract_academic_years = function(body) {
      var y1, y2, _ref;
      return _ref = body.find('h1').text().slice(-9).split('-'), y1 = _ref[0], y2 = _ref[1], _ref;
    };
    extract_start_end_dates = function(fullTable, years) {
      var cell, dateStr_to_numStr, dates, firstDate, firstMonth, i, lastDate, lastMonth, months, year;
      dateStr_to_numStr = function(str) {
        var months;
        months = ('January,February,March,April,May,June,July,' + 'August,September,October,November,December').split(',');
        return months.indexOf(str) + 1;
      };
      months = (function() {
        var _i, _len, _ref, _results;
        _ref = $(fullTable).find('tr').eq(0).find('th');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cell = _ref[_i];
          if ($(cell).attr('bgcolor') === "white") {
            _results.push($(cell).text().replace(/\s+/g, ''));
          }
        }
        return _results;
      })();
      firstMonth = dateStr_to_numStr(months[0]);
      lastMonth = dateStr_to_numStr(months[months.length - 1]);
      year = (parseInt(firstMonth) < 9 ? years[1] : years[0]);
      dates = $(fullTable).find('tr').eq(2).find('th');
      i = 0;
      while ($(dates[i]).text().length === 0) {
        i++;
      }
      dates = (function() {
        var _i, _len, _ref, _results;
        _ref = $(fullTable).find('tr').eq(2).find('th');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cell = _ref[_i];
          if ($(cell).text().replace(/\s+/g, '').length !== 0) {
            _results.push($(cell).text());
          }
        }
        return _results;
      })();
      firstDate = dates[0];
      lastDate = dates[dates.length - 1];
      return {
        start: year + '-' + firstMonth + '-' + firstDate,
        end: year + '-' + lastMonth + '-' + lastDate,
        colBufferToFirst: i - 1,
        toString: function() {
          return 'First : ' + this.start + '\nLast : ' + this.end + '\nCol Buffer : ' + this.colBufferToFirst;
        }
      };
    };
    process_module_cell = function(cell) {
      var id, name, _ref;
      _ref = cell.text().split(' - '), id = _ref[0], name = _ref[1];
      return {
        id: id,
        name: name.replace(/^\s+|\s+$/g, ''),
        notesLink: cell.find('a').eq(0).attr('href'),
        toString: function() {
          return "Module ID : " + this.id + '\nModule name : ' + this.name + '\nNotes link : ' + this.notesLink;
        }
      };
    };
    process_exercises_from_cells = function(module, cells) {
      var anchor, colSpan, currentDate, end, ex, exCell, givens, href, hrefs, id, mailto, spec, type, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (cells == null) {
        return null;
      }
      if ((_ref = module.exercises) == null) {
        module.exercises = [];
      }
      currentDate = parseDate(dates.start);
      currentDate.setDate(currentDate.getDate() - dates.colBufferToFirst);
      _results = [];
      for (_i = 0, _len = cells.length; _i < _len; _i++) {
        exCell = cells[_i];
        colSpan = parseInt($(exCell).attr('colspan'));
        if (($(exCell).attr('bgcolor') != null) && $(exCell).find('a').length !== 0) {
          _ref1 = $(exCell).find('b').eq(0).text().split(':'), id = _ref1[0], type = _ref1[1];
          hrefs = (function() {
            var _j, _len1, _ref2, _results1;
            _ref2 = $(exCell).find('a');
            _results1 = [];
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              anchor = _ref2[_j];
              if ($(anchor).attr('href') != null) {
                _results1.push($(anchor).attr('href'));
              }
            }
            return _results1;
          })();
          for (_j = 0, _len1 = hrefs.length; _j < _len1; _j++) {
            href = hrefs[_j];
            if (/mailto/i.test(href)) {
              mailto = href;
            } else if (/SPECS/i.test(href)) {
              spec = href;
            } else if (/given/i.test(href)) {
              givens = href;
            }
          }
          end = new Date(currentDate.getTime());
          end.setDate(end.getDate() + colSpan - 1);
          ex = {
            id: id,
            type: type,
            start: new Date(currentDate.getTime()),
            end: end,
            moduleName: module.name,
            name: $(exCell).text().slice(id.length + type.length + 2),
            mailto: mailto,
            spec: spec,
            givens: givens,
            toString: function() {
              return "{" + this.id + ':' + this.type + "} -- " + this.name + "\nSet date : " + this.start.getDate() + '/' + this.start.getMonth() + '/' + this.start.getYear() + "\nDue date : " + this.end.getDate() + '/' + this.end.getMonth() + '/' + this.end.getYear();
            }
          };
          module.exercises.push(ex);
        }
        _results.push(currentDate.setDate(currentDate.getDate() + colSpan));
      }
      return _results;
    };
    extract_module_exercise_data = function(fullTable) {
      var allRows, cells, count, cs, currentRow, exerciseCells, followingRows, isModule, module, modules, noOfFollowingRows, row, rows, _i, _len;
      rows = (function() {
        var _i, _len, _ref, _results;
        _ref = $(fullTable).find('tr');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          if ($($(row).find('td').eq(1)).find('font').attr('color') === "blue") {
            _results.push($(row));
          }
        }
        return _results;
      })();
      allRows = $(fullTable).find('tr');
      modules = [];
      count = 0;
      while (count < allRows.length) {
        currentRow = allRows[count];
        noOfFollowingRows = 0;
        module = $($(currentRow).find('td').eq(1));
        isModule = false;
        if (module.find('font').attr('color') === "blue") {
          isModule = true;
          module = process_module_cell(module);
          noOfFollowingRows = $(currentRow).find('td').eq(0).attr('rowspan') - 1;
          followingRows = allRows.slice(count + 1, +(count + noOfFollowingRows) + 1 || 9e9);
          exerciseCells = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = followingRows.length; _i < _len; _i++) {
              row = followingRows[_i];
              _results.push($(row).find('td').slice(1));
            }
            return _results;
          })();
          exerciseCells.push($(currentRow).find('td').slice(4));
          exerciseCells = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = exerciseCells.length; _i < _len; _i++) {
              cs = exerciseCells[_i];
              if (cs != null) {
                _results.push(cs);
              }
            }
            return _results;
          })();
          for (_i = 0, _len = exerciseCells.length; _i < _len; _i++) {
            cells = exerciseCells[_i];
            process_exercises_from_cells(module, cells);
          }
        }
        if (isModule) {
          modules.push(module);
        }
        count = count + noOfFollowingRows + 1;
      }
      return modules;
    };
    term_title = extract_term_title(html);
    timetable = (function() {
      var _i, _len, _ref, _results;
      _ref = html.find('table');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tb = _ref[_i];
        if ($(tb).attr('border') === "0") {
          _results.push(tb);
        }
      }
      return _results;
    })();
    dates = extract_start_end_dates(timetable, extract_academic_years(html));
    modules = extract_module_exercise_data(timetable);
    return {
      modules: modules,
      start: dates.start,
      end: dates.end,
      term_title: term_title
    };
  };

  extract_grades_page_data = function(html) {
    var extract_modules, optional_modules, process_grade_row, process_header_row, required_modules, submissions_completed, submissions_extended, submissions_late, subscription_last_updated;
    process_header_row = function(row) {
      return {
        name: text_extract(row.find('td:eq(0)')),
        term: text_extract(row.find('td:eq(1)')),
        submission: text_extract(row.find('td:eq(2)')),
        level: text_extract(row.find('td:eq(3)')),
        exercises: []
      };
    };
    process_grade_row = function(row) {
      return {
        id: parseInt(text_extract(row.find('td:eq(0)'))),
        type: text_extract(row.find('td:eq(1)')),
        title: text_extract(row.find('td:eq(2)')),
        set_by: text_extract(row.find('td:eq(3)')),
        declaration: text_extract(row.find('td:eq(4)')),
        extension: text_extract(row.find('td:eq(5)')),
        submission: text_extract(row.find('td:eq(6)')),
        grade: text_extract(row.find('td:eq(7)'))
      };
    };
    extract_modules = function(table) {
      var current_module, grade_rows, modules;
      grade_rows = table.find('tr');
      grade_rows = grade_rows.slice(2);
      modules = [];
      current_module = null;
      grade_rows.each(function(i, e) {
        var row_elem, tds;
        row_elem = $(e);
        tds = row_elem.find('td');
        if (tds.length > 1) {
          if ($(tds[0]).attr('colspan')) {
            current_module = process_header_row(row_elem);
            return modules.push(current_module);
          } else {
            return current_module.exercises.push(process_grade_row(row_elem));
          }
        }
      });
      return modules;
    };
    subscription_last_updated = text_extract(html.find('table:eq(7) table td:eq(1)'));
    submissions_completed = text_extract(html.find('table:eq(7) table td:eq(4)'));
    submissions_extended = text_extract(html.find('table:eq(7) table td:eq(6)'));
    submissions_late = text_extract(html.find('table:eq(7) table td:eq(8)'));
    required_modules = extract_modules(html.find('table:eq(9)'));
    optional_modules = extract_modules(html.find('table:eq(-2)'));
    return {
      stats: {
        subscription_last_updated: subscription_last_updated,
        submissions_completed: submissions_completed,
        submissions_extended: submissions_extended,
        submissions_late: submissions_late
      },
      required_modules: required_modules,
      optional_modules: optional_modules
    };
  };

  populate_layout = function(vars) {
    $('#cc-version').html(vars.version);
    $('#nav-dashboard').attr('href', vars.current_url);
    $('#nav-exercises').attr('href', vars.timetable_url);
    $('#nav-grades').attr('href', vars.individual_records_link);
    $('#cc-current-year').html("(" + vars.current_year + ")");
    if (window.classy_cate_script_version !== CLASSY_CATE_SCRIPT_VERSION) {
      $('#page-content').before('<div class="alert alert-error">' + 'Your Classy-CATE script is out of date! ' + '<a href="http://classy-cate.herokuapp.com/classy-cate.user.js">' + 'Click Here' + '</a>' + ' to update to CCv' + CLASSY_CATE_SCRIPT_VERSION + '</a>');
    }
    $('#nav-dashboard').bind('click', load_dashboard_page);
    $('#nav-grades').bind('click', load_grades_page);
    return $('#old-cate-button').bind('click', activate_nostalgia_mode);
  };

  populate_main_page = function(vars) {
    $('#cc-identity-profile-image').attr('src', vars.profile_image_src);
    $('#cc-identity-first-name').html(vars.first_name);
    $('#cc-identity-last-name').html(vars.last_name);
    $('#cc-identity-login').html(vars.login);
    $('#cc-identity-category').html(vars.category);
    $('#cc-identity-candidate-number').html(vars.candidate_number);
    $('#cc-identity-cid').html(vars.cid);
    $('#cc-identity-personal-tutor').html(vars.personal_tutor);
    vars.available_years.each(function(i, val) {
      return $('#cc-year-dropdown').append('<li><a href="' + val.href + '">' + val.text + '</a></li>');
    });
    $('#cc-other-projects-portal').attr('href', vars.projects_portal_link);
    $('#cc-other-extensions').attr('href', vars.extensions_link);
    $('#cc-other-documentation').attr('href', vars.documentation_link);
    $('#cc-keyt').val(vars.keyt);
    $('#cc-class-select').val(vars.default_class);
    return $('#cc-period-select').val(vars.default_period);
  };

  populate_exercises_page = function(vars) {
    var ex, format_date, module, moduleTable, modules, populate_exercise_row, row, _i, _len, _results;
    format_date = function(date) {
      return date.getDate() + '/' + date.getMonth() + '/' + date.getYear();
    };
    populate_exercise_row = function(row, ex) {
      var givensCell, specCell;
      row.find('.id').text('{' + ex.id + ':' + ex.type + '}');
      if (!/\S/.test(ex.name)) {
        row.find('.name').text(ex.name);
      }
      row.find('.set').text(format_date(ex.set));
      row.find('.due').text(format_date(ex.due));
      if (ex.spec != null) {
        (specCell = row.find('.spec')).text('');
        $(document.createElement('a')).attr('href', ex.spec).appendTo(specCell);
      }
      if (ex.givens != null) {
        (givensCell = row.find('.given')).text('');
        return $(document.createElement('a')).attr('href', ex.givens).appendTo(givenCell);
      }
    };
    modules = vars.modules;
    $('#term_title').text('Timetable - ' + vars.term_title);
    _results = [];
    for (_i = 0, _len = modules.length; _i < _len; _i++) {
      module = modules[_i];
      if (module.exercises[0] != null) {
        $('#page-content').append(moduleTable = $('#exercises_template').clone());
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = module.exercises;
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            ex = _ref[_j];
            (row = $('#exercise_row_template').clone()).appendTo(moduleTable);
            _results1.push(populate_exercise_row(row, ex));
          }
          return _results1;
        })());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
    /*structure = {
      title : ['id','type']
      extendedTitle : ['name']
      content :
        names : ['HAND IN', 'SPEC', 'GIVENS']
        links : ['handin', 'spec', 'givens']
    }
    destDiv = $('#page-content')
    for module in modules
      if module.exercises? and module.exercises[0]?
        destDiv.append('<h3>' + module.id + ' - ' + module.name + '</h3>')
        createTimelineWithMoments(vars.start, vars.end, 
          'day', destDiv, module.exercises, structure)
    */

  };

  populate_grades_page = function(vars) {
    var grade_to_class, grade_to_width, render_module;
    grade_to_class = function(grade) {
      switch (grade) {
        case "A*":
        case "A+":
        case "A":
          return "progress-success";
        case "B":
          return "progress-info";
        case "C":
          return "progress-warning";
        case "D":
        case "E":
        case "F":
          return "progress-danger";
      }
    };
    grade_to_width = function(grade) {
      var width;
      width = (function() {
        switch (grade) {
          case "A*":
            return 100;
          case "A+":
            return 89;
          case "A":
            return 79;
          case "B":
            return 69;
          case "C":
            return 59;
          case "D":
            return 49;
          case "E":
            return 39;
          case "F":
            return 29;
          default:
            return 0;
        }
      })();
      return "" + width + "%";
    };
    render_module = function(module) {
      var grades_table, module_elem;
      module_elem = $('#module_template .row').clone();
      module_elem.find('.module-title').html(module.name);
      grades_table = module_elem.find('.module-grades');
      if (module.exercises.length === 0) {
        grades_table.append($('<tr><td colspan="8">No exercises for this module.</td></tr>'));
      } else {
        $(module.exercises).each(function(i, exercise) {
          var exercise_elem;
          exercise_elem = $('#exercise_template tr').clone();
          exercise_elem.find('.exercise-id').html(exercise.id);
          exercise_elem.find('.exercise-type').html(exercise.type);
          exercise_elem.find('.exercise-title').html(exercise.title);
          exercise_elem.find('.exercise-set-by').html(exercise.set_by);
          exercise_elem.find('.exercise-declaration').html(exercise.declaration);
          exercise_elem.find('.exercise-extension').html(exercise.extension);
          exercise_elem.find('.exercise-submission').html(exercise.submission);
          switch (exercise.grade) {
            case "":
              exercise_elem.find('.exercise-grade-container').html("No Record");
              break;
            case "n/a":
              exercise_elem.find('.exercise-grade-container').html('<i class="icon-legal" /> Awaiting Marking');
              break;
            case "N/P":
              exercise_elem.find('.exercise-grade-container').html('<i class="icon-lock" /> Marked, Not Published');
              break;
            default:
              exercise_elem.find('.progress').addClass(grade_to_class(exercise.grade));
              exercise_elem.find('.progress .bar').css('width', grade_to_width(exercise.grade));
              exercise_elem.find('.exercise-grade').html(exercise.grade);
          }
          return grades_table.append(exercise_elem);
        });
      }
      return module_elem;
    };
    $('#cc-subscription-updated').html(vars.stats.subscription_last_updated);
    $('#cc-submissions-completed').html(vars.stats.submissions_completed);
    $('#cc-submissions-extended').html(vars.stats.submissions_extended);
    $('#cc-submissions-late').html(vars.stats.submissions_late);
    $(vars.required_modules).each(function(i, module) {
      return $('#cc-required-modules').append(render_module(module));
    });
    return $(vars.optional_modules).each(function(i, module) {
      return $('#cc-optional-modules').append(render_module(module));
    });
  };

  load_dashboard_page = function(e) {
    var url;
    if (e != null) {
      e.preventDefault();
    }
    window.location.hash = "dashboard";
    url = $('#nav-dashboard').attr('href');
    console.log(url);
    return load_cate_page(url, function(body) {
      var main_page_vars;
      console.log(body);
      main_page_vars = extract_main_page_data(body);
      populate_html('#page-content', MAIN_PAGE_HTML);
      return populate_main_page(main_page_vars);
    });
  };

  load_grades_page = function(e) {
    if (e != null) {
      e.preventDefault();
    }
    window.location.hash = "grades";
    return load_cate_page($('#nav-grades').attr('href'), function(body) {
      var grade_page_vars;
      grade_page_vars = extract_grades_page_data(body);
      populate_html('#page-content', GRADES_PAGE_HTML);
      return populate_grades_page(grade_page_vars);
    });
  };

  load_exercises_page = function(e) {
    var href, isHoliday, period;
    if (e != null) {
      e.preventDefault();
    }
    window.location.hash = "timetable";
    href = $('#nav-exercises').attr('href');
    period = parseInt(href.split('period=')[1][0]);
    isHoliday = function(period) {
      return period % 2 === 0;
    };
    if (isHoliday(period)) {
      href = href.replace('period=' + period, 'period=' + (period - 1));
    }
    return load_cate_page(href, function(body) {
      var exercise_page_vars;
      exercise_page_vars = extract_exercise_page_data(body);
      populate_html('#page-content', EXERCISES_PAGE_HTML);
      return populate_exercises_page(exercise_page_vars);
    });
  };

  load_css = function() {
    $('head').append('<link rel="stylesheet" href="//netdna.bootstrapcdn.com/twitter-bootstrap/2.2.2/css/bootstrap-combined.min.css" type="text/css" />');
    $('head').append('<link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/3.0/css/font-awesome.css" type="text/css" />');
    return $('head').append('<link rel="stylesheet" href="https://classy-cate.herokuapp.com/classy-cate.css" type="text/css" />');
  };

  initial_load = function() {
    var cate_notice, current_url, hash, main_page_vars;
    current_url = document.URL;
    if (/personal/i.test(current_url)) {
      load_css();
      hash = window.location.hash.replace('#', '');
      main_page_vars = extract_main_page_data($('body'));
      populate_html('body', LAYOUT_HTML);
      populate_layout(main_page_vars);
      if (hash === "grades") {
        return load_grades_page();
      } else if (hash === "timetable") {
        return load_exercises_page();
      } else {
        return load_dashboard_page();
      }
    } else if (/student/i.test(current_url)) {
      return window.location = "/#grades";
    } else if (/timetable/i.test(current_url)) {
      return window.location = "/#timetable";
    } else {
      cate_notice = $('<div>Classy CATE hasn\'t been implemented for this page yet<br/><a href="https://github.com/PeterHamilton/classy-cate">Implement it!</a></div>');
      cate_notice.attr('style', 'padding: 20px; margin-bottom: 20px; text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5); border: 3px solid #eed3d7; -webkit-border-radius: 4px; -moz-border-radius: 4px; border-radius: 4px; color: #b94a48; background-color: #f2dede; font-size: 18px; text-align: center;');
      return $('body').prepend(cate_notice);
    }
  };

  initial_load();

}).call(this);
