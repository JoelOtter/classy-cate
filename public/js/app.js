// Generated by CoffeeScript 1.7.1
(function() {
  var auth, classy, getPerc,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  auth = angular.module('auth', []);

  classy = angular.module('classy', ['ui.router', 'auth']);

  classy.config([
    '$httpProvider', '$stateProvider', function($httpProvider, $stateProvider) {
      $httpProvider.interceptors.push('authInterceptor');
      $stateProvider.state('dashboard', {
        url: '/',
        templateUrl: '/partials/dashboard'
      });
      $stateProvider.state('grades', {
        url: '/grades',
        templateUrl: '/partials/grades'
      });
      $stateProvider.state('exams', {
        url: '/exams',
        templateUrl: '/partials/exams'
      });
      return $stateProvider.state('login', {
        url: '/login',
        templateUrl: '/partials/login'
      });
    }
  ]);

  classy.run([
    '$state', '$rootScope', 'Dashboard', function($state, $rootScope, Dashboard) {
      Dashboard.get();
      return $state.transitionTo('dashboard');
    }
  ]);

  auth = angular.module('auth');

  auth.factory('Auth', function($q, $http, $window, $state) {
    var Auth, deferred;
    deferred = null;
    return Auth = (function() {
      function Auth() {}

      Auth.user = null;

      Auth.isMe = function(user) {
        var _ref;
        return (user != null ? user._id : void 0) === ((_ref = this.user) != null ? _ref._id : void 0);
      };

      Auth.whoami = function(force) {
        var req;
        if ((deferred == null) || force) {
          deferred = $q.defer();
          if (!force && (this.user != null)) {
            deferred.resolve(this.user);
          } else {
            req = $http({
              url: '/api/whoami',
              cache: false
            });
            req.success(function(data, status) {
              return deferred.resolve((Auth.user = data.user));
            }).error(function(data) {
              return Auth.user = null;
            });
          }
        }
        return deferred.promise;
      };

      Auth.login = function(user, pass) {
        deferred = $q.defer();
        $http.post('/authenticate', {
          user: user,
          pass: pass
        }).success(function(data, status) {
          console.log('Success: Authenticated');
          $window.sessionStorage.token = data.token;
          Auth.user = data.user;
          return deferred.resolve(data);
        }).error(function(data, status) {
          console.log('Error: Invalid user/pass');
          delete $window.sessionStorage.token;
          Auth.user = null;
          return deferred.reject(null);
        });
        return deferred.promise;
      };

      Auth.logout = function() {
        var tapped;
        deferred = $q.defer();
        delete $window.sessionStorage.token;
        Auth.user = null;
        tapped = Auth.whoami(true);
        tapped.then(function(id) {
          return deferred.resolve(id);
        });
        return deferred.promise;
      };

      return Auth;

    })();
  });

  auth = angular.module('auth');

  auth.controller('AuthCtrl', function(Auth, $scope, $http, $window, $state) {
    $scope.input = {
      user: null,
      pass: null
    };
    $scope.denied = false;
    $scope.btnMssg = function() {
      if ($scope.denied) {
        return 'Invalid, try again';
      } else {
        return 'Login';
      }
    };
    return $scope.submit = function() {
      var authed;
      authed = Auth.login($scope.input.user, $scope.input.pass);
      authed.then(function(data) {
        return $state.transitionTo('bookings');
      });
      return authed["catch"](function() {
        return $scope.denied = true;
      });
    };
  });

  auth = angular.module('auth');

  auth.directive('authLogout', function(Auth) {
    return {
      restrict: 'AC',
      link: function($scope, $elem, attr) {
        return $elem.click(function() {
          return Auth.logout();
        });
      }
    };
  });

  auth = angular.module('auth');

  auth.factory('authInterceptor', function($rootScope, $q, $window) {
    return {
      request: function(config) {
        config.headers = config.headers || {};
        if ($window.sessionStorage.token) {
          config.headers.Authorization = "Bearer " + $window.sessionStorage.token;
        }
        return config || $q.when(config);
      },
      responseError: function(response) {
        var prev;
        if (response.status === 401) {
          console.log('User is not authed');
          prev = $window.location.hash;
          if (!/login/.test(prev)) {
            $window.previous = prev;
          }
          $window.location = '#/login';
        }
        return $q.reject(response);
      }
    };
  });

  classy = angular.module('classy');

  classy.factory('Dashboard', function(CateResource, $rootScope, $q) {
    var Dashboard;
    return Dashboard = (function(_super) {
      __extends(Dashboard, _super);

      function Dashboard() {
        return Dashboard.__super__.constructor.apply(this, arguments);
      }

      Dashboard.get = function() {
        var promise;
        promise = Dashboard.__super__.constructor.get.apply(this, arguments);
        promise.then(function(res) {
          return $rootScope.available_years = res.available_years;
        });
        return promise;
      };

      return Dashboard;

    })(CateResource('/api/dashboard'));
  });

  classy.controller('DashboardCtrl', function($scope, Dashboard) {
    return Dashboard.get().then(function(dash) {
      return $scope.dashboard = dash;
    });
  });

  classy = angular.module('classy');

  classy.factory('Exams', function(CateResource, $q) {
    var Exams, deferred, myExams;
    myExams = [];
    deferred = $q.defer();
    return Exams = (function(_super) {
      __extends(Exams, _super);

      function Exams() {
        return Exams.__super__.constructor.apply(this, arguments);
      }

      Exams.loaded = deferred.promise;

      Exams.getMyExams = function() {
        this.makeReq('/api/myexams').success((function(_this) {
          return function(data) {
            var e;
            deferred.resolve(data);
            return myExams = (function() {
              var _i, _len, _ref, _results;
              _ref = data.exams;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                e = _ref[_i];
                _results.push(e.id);
              }
              return _results;
            })();
          };
        })(this));
        return deferred.promise;
      };

      Exams.isMyExam = function(id) {
        var _i, _id, _len;
        for (_i = 0, _len = myExams.length; _i < _len; _i++) {
          _id = myExams[_i];
          if (_id === id) {
            return true;
          }
        }
        return false;
      };

      Exams.prototype.title = function() {
        return this.titles[0];
      };

      Exams.prototype.fulltitle = function() {
        return "" + this.id + ": " + (this.title());
      };

      return Exams;

    })(CateResource('/api/exams'));
  });

  classy.controller('ExamsCtrl', function($scope, Exams) {
    Exams.get().then(function(exams) {
      return $scope.exams = exams;
    });
    return Exams.getMyExams().then(function(data) {
      return $scope.myexams = data.exams;
    });
  });

  classy = angular.module('classy');

  classy.controller('PaperCtrl', function($scope, Exams) {
    $scope.input = {
      mineonly: false
    };
    Exams.loaded.then(function() {
      return $scope.input.mineonly = true;
    });
    $scope.firstFew = function(exam, cut) {
      return exam.papers.slice(0, +cut + 1 || 9e9);
    };
    $scope.lastFew = function(exam, cut) {
      return exam.papers.slice(cut + 1);
    };
    return $scope.mine = function(exam) {
      if (!$scope.input.mineonly) {
        return true;
      }
      return Exams.isMyExam(exam.id);
    };
  });

  classy = angular.module('classy');

  getPerc = function(grade) {
    var klass, rex, score, str, test, _i, _len, _ref;
    _ref = [[/^A\*$/, 'A*', 100, 'progress-bar-success'], [/^A\+$/, 'A+', 90, 'progress-bar-success'], [/^A$/, 'A', 80, 'progress-bar-success'], [/^B$/, 'B', 70, 'progress-bar-success'], [/^C$/, 'C', 60, 'progress-bar-warning'], [/^D$/, 'D', 50, 'progress-bar-warning'], [/^E$/, 'E', 40, 'progress-bar-danger'], [/^F$/, 'F', 25, 'progress-bar-danger'], [/n\/a/, 'NA'], [/ZERO/, 'ZERO'], [/\=DD\=/, 'Deferred Decision'], [/GNFP/, 'Grades not for publish']];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      test = _ref[_i];
      rex = test[0], str = test[1], score = test[2], klass = test[3];
      if (rex.test(grade)) {
        return [str, score, klass];
      }
    }
  };

  classy.directive('gradeBar', function() {
    return {
      restrict: 'CE',
      template: "<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\"\n       aria-valuemin=\"0\" aria-valuemax=\"100\">\n  </div>\n</div>",
      link: function($scope, $elem, attr) {
        var $bar, grade, klass, label, res, score;
        grade = ($scope.$eval(attr.grade)).trim();
        if (grade === '') {
          return $elem.remove();
        }
        if ((res = getPerc(grade)) != null) {
          label = res[0], score = res[1], klass = res[2];
          $bar = $elem.find('.progress-bar');
          if (score != null) {
            $bar.css({
              width: "" + score + "%"
            });
            $bar.addClass(klass);
            $elem = $elem.find('.progress-bar');
          }
        }
        return $elem.html(label || grade);
      }
    };
  });

  classy = angular.module('classy');

  classy.factory('Grades', function(CateResource) {
    var Grades;
    return Grades = (function(_super) {
      __extends(Grades, _super);

      function Grades() {
        return Grades.__super__.constructor.apply(this, arguments);
      }

      return Grades;

    })(CateResource('/api/grades'));
  });

  classy.controller('GradesCtrl', function($scope, Grades) {
    $scope.grades = {
      required_modules: [],
      optional_modules: []
    };
    return Grades.get().then(function(grades) {
      return $scope.grades = grades;
    });
  });

  classy = angular.module('classy');

  classy.factory('CateResource', function($q, $http) {
    return function(url, key, cache) {
      var CateResource;
      if (cache == null) {
        cache = true;
      }
      return CateResource = (function() {
        function CateResource(data) {
          angular.extend(this, data);
        }

        CateResource.makeReq = function(url, method) {
          var deferred, req;
          if (method == null) {
            method = 'GET';
          }
          deferred = $q.defer();
          return req = $http({
            url: url,
            method: method
          });
        };

        CateResource.get = function() {
          var deferred, req, self;
          deferred = $q.defer();
          self = this;
          req = $http({
            method: 'GET',
            url: url,
            cache: cache
          });
          req.success(function(data) {
            var elem;
            if (data instanceof Array) {
              data = (function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = data.length; _i < _len; _i++) {
                  elem = data[_i];
                  _results.push(new self(elem));
                }
                return _results;
              })();
            } else {
              data = new self(data);
            }
            return deferred.resolve(data);
          });
          return deferred.promise;
        };

        return CateResource;

      })();
    };
  });

}).call(this);
