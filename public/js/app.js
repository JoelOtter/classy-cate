// Generated by CoffeeScript 1.7.1
(function() {
  var DashboardPopulator, ExercisePageScraper, ExercisePopulator, ExerciseRowPopulator, GivensPageScraper, GivensPopulator, GradesPageScraper, GradesPopulator, LayoutPopulator, MainPageScraper, NotesPageScraper, NotesPopulator, PagePopulator, PageScraper, SETTINGS, animate_moments, create_interval_markers, create_moments, create_spine, default_settings, draw_end_wires, layer_moment_tooltips, load_cate_page, load_dashboard_page, load_exercises_page, load_grades_page, make_circle, month_num_to_name, parse_date, produce_wire,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  angular.module('classy', []);

  load_cate_page = function(url, callback) {
    return $.ajax({
      type: 'GET',
      url: url,
      dataType: 'html',
      success: function(data) {
        var body, icons;
        data = data.split(/<body.*>/)[1].split('</body>')[0];
        body = $('<body/>').append(data);
        icons = body.find('img[src^="icons/"]');
        icons.remove();
        return callback(body);
      }
    });
  };

  load_dashboard_page = function(e) {
    var url;
    if (e != null) {
      e.preventDefault();
    }
    window.location.hash = "dashboard";
    url = $('#nav-dashboard').attr('href');
    return load_cate_page(url, function(old_body) {
      var populator, scraper, vars;
      scraper = new MainPageScraper(old_body);
      populator = new DashboardPopulator($('body'));
      vars = scraper.scrape_vars();
      replace_html('#page-content', DASHBOARD_PAGE_TEMPLATE_HTML);
      return populator.populate(vars);
    });
  };

  load_grades_page = function(e) {
    var url;
    if (e != null) {
      e.preventDefault();
    }
    window.location.hash = "grades";
    url = $('#nav-grades').attr('href');
    return load_cate_page(url, function(old_body) {
      var populator, scraper, vars;
      scraper = new GradesPageScraper(old_body);
      populator = new GradesPopulator($('body'));
      vars = scraper.scrape_vars();
      replace_html('#page-content', GRADES_PAGE_TEMPLATE_HTML);
      return populator.populate(vars);
    });
  };

  load_exercises_page = function(e, period, url) {
    var get_period_from_url, get_url_for_period, isHoliday;
    isHoliday = function(period) {
      return period % 2 === 0;
    };
    get_period_from_url = function(url) {
      return parseInt(url.split('period=')[1][0]);
    };
    get_url_for_period = function(p) {
      var crrt;
      crrt = $('#nav-exercises').attr('href').split('period=');
      return crrt[0] + 'period=' + p + crrt[1].slice(1);
    };
    if (e != null) {
      e.preventDefault();
    }
    window.location.hash = "exercises";
    if (url == null) {
      url = $('#nav-exercises').attr('href');
    }
    if (period == null) {
      period = get_period_from_url(url);
    }
    url = get_url_for_period(period);
    return load_cate_page(url, function(old_body) {
      var populator, scraper, vars;
      scraper = new ExercisePageScraper(old_body);
      populator = new ExercisePopulator($('#page-content'));
      vars = scraper.scrape_vars();
      vars.period = period;
      replace_html('#page-content', EXERCISES_PAGE_TEMPLATE_HTML);
      return populator.populate(vars);
    });
  };

  SETTINGS = null;

  default_settings = function() {
    $.fx.interval = 8;
    return SETTINGS = {
      container: null,
      spine: null,
      start_date: null,
      end_date: null,
      intervals: [],
      no_of_intervals: 0,
      clash_sensitivity: {
        h: 5,
        v: 6
      },
      structure: {},
      moments: [],
      pct_buffer_for_markers: 3,
      spine_buffer: 5,
      initial_heights: {
        up: [-18, -34, -42, -44],
        down: [12, 14, 18, 20]
      },
      date_to_marker_index: function(d) {
        return Math.floor((d - this.start_date) / (1000 * 60 * 60 * 24));
      },
      pct_per_interval: function() {
        return (100 - this.pct_buffer_for_markers) / (this.intervals.length - 1);
      },
      date_to_marker_left_pct: function(d) {
        return this.pct_buffer_for_markers + this.pct_per_interval() * (this.date_to_marker_index(parse_date(d)));
      }
    };
  };

  window.create_timeline = function(opt) {
    var jQuery_link, m, script;
    if (typeof $ === "undefined" || $ === null) {
      jQuery_link = 'http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js';
      script = document.createElement('script');
      script.setAttribute('src', jQuery_link);
      document.body.appendChild(script);
      console.log('Adding jQuery');
    }
    default_settings();
    if (!(opt.destination != null)) {
      console.log('You are missing either destination or timeline start/end dates.');
    } else if (!((opt.start_date != null) && (opt.end_date != null)) && (opt.moments[0] == null)) {
      console.log('Cannot determine start and end with no moments');
    } else {
      if (opt.start_date == null) {
        SETTINGS.start_date = new Date((Math.min.apply(Math, (function() {
          var _i, _len, _ref, _results;
          _ref = opt.moments;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            m = _ref[_i];
            _results.push(parse_date(m.start));
          }
          return _results;
        })())) - 3 * 1000 * 60 * 60 * 24);
      } else {
        SETTINGS.start_date = opt.start_date;
      }
      if (opt.end_date == null) {
        SETTINGS.end_date = new Date((Math.max.apply(Math, (function() {
          var _i, _len, _ref, _results;
          _ref = opt.moments;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            m = _ref[_i];
            _results.push(parse_date(m.end));
          }
          return _results;
        })())) + 3 * 1000 * 60 * 60 * 24);
      } else {
        SETTINGS.end_date = opt.end_date;
      }
      create_interval_markers((SETTINGS.spine = create_spine(opt.destination, SETTINGS)));
      SETTINGS.spine.data('settings', SETTINGS);
      if (opt.moments[0] != null) {
        if (!opt.structure) {
          console.log('Structure required for building moments');
        } else {
          SETTINGS.structure = opt.structure;
          opt.moments.map(function(m) {
            var _ref;
            return _ref = [parse_date(m.start), parse_date(m.end)], m.start = _ref[0], m.end = _ref[1], _ref;
          });
          SETTINGS.moments = opt.moments.sort(function(a, b) {
            return a.start - b.start;
          });
          create_moments(SETTINGS.spine);
        }
      }
    }
    return SETTINGS.container;
  };

  create_spine = function(destination, SETTINGS) {
    var draw_origin_circle, id, spine_left;
    draw_origin_circle = function() {
      var circle;
      circle = make_circle(15, 'black').css('left', 0).hide();
      circle.hover(function() {
        return circle.css('background-color', 'blue');
      }, function() {
        return circle.css('background-color', 'black');
      }).data('clicked', true).click(function() {
        var clicked, m, _i, _len, _ref;
        clicked = circle.data('clicked');
        _ref = $(this).parent().data('settings').moments;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          m.is_expanded = clicked;
        }
        circle.data('clicked', !clicked);
        return layer_moment_tooltips($(this).parent());
      });
      return circle;
    };
    spine_left = SETTINGS.spine_buffer;
    id = "timeline" + ($('.timeline_container').length);
    SETTINGS.container = $("<div/ id='" + id + "' class='timeline_container'>").appendTo(destination);
    return SETTINGS.spine = $('<div/ class="spine">').appendTo(SETTINGS.container).css({
      left: spine_left + '%',
      width: 97 - spine_left + '%'
    }).append(draw_origin_circle().addClass('origin').delay(400).fadeIn(300)).data('settings', SETTINGS);
  };

  create_interval_markers = function(spine) {
    var build_label, int_lbl, interval, intervals, left, produce_intervals, set_priority, today, _i, _len, _ref, _results;
    set_priority = function(interval) {
      var _ref;
      console.log;
      if ((0 <= (_ref = (today.getTime() - interval.js_date.getTime()) / 24 / 60 / 60) && _ref < 1000)) {
        return interval.priority = 4;
      } else if (interval.date === 1) {
        return interval.priority = 3;
      } else if (interval.day === 1) {
        return interval.priority = 2;
      } else {
        return interval.priority = 1;
      }
    };
    produce_intervals = function() {
      var end, interval, start, _i, _len, _ref, _ref1;
      _ref = [SETTINGS.start_date, SETTINGS.end_date].map(parse_date), start = _ref[0], end = _ref[1];
      while (start <= end) {
        SETTINGS.intervals.push({
          date: start.getDate(),
          day: start.getDay(),
          month: start.getMonth(),
          year: start.getFullYear(),
          js_date: new Date(start.getTime())
        });
        start.setDate(start.getDate() + 1);
      }
      _ref1 = SETTINGS.intervals;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        interval = _ref1[_i];
        set_priority(interval);
      }
      return SETTINGS.intervals;
    };
    build_label = function(interval) {
      return $('<div/ class="interval_label p' + interval.priority + '">').css({
        left: SETTINGS.date_to_marker_left_pct(interval.js_date) + '%'
      });
    };
    today = new Date();
    _ref = (intervals = produce_intervals());
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      interval = _ref[_i];
      left = SETTINGS.date_to_marker_left_pct(interval.js_date) + '%';
      $('<div/ class="interval_marker p' + interval.priority + '">').css('left', left).delay(800).fadeIn().appendTo(spine);
      int_lbl = build_label(interval);
      switch (interval.priority) {
        case 4:
          int_lbl.text('Now');
          break;
        case 3:
          int_lbl.text(month_num_to_name(interval.month));
          break;
        case 2:
          int_lbl.text("Mon " + interval.date);
      }
      if (int_lbl.priority !== 1) {
        _results.push(int_lbl.appendTo(spine));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  create_moments = function(spine) {
    var create_moment_tooltips, create_start_end_markers, i, infos, last_index, m, produce_duration_wire, produce_start_wire, _i, _len, _ref;
    create_start_end_markers = function(m) {
      var cols, e_lft, s_lft, _ref;
      _ref = [SETTINGS.date_to_marker_left_pct(m.start) + '%', SETTINGS.date_to_marker_left_pct(m.end) + '%'], s_lft = _ref[0], e_lft = _ref[1];
      cols = ['#47ACCA', '#E0524E'];
      m.start_marker = make_circle(7, cols[0]).addClass('start').css('left', s_lft);
      m.end_marker = make_circle(7, cols[1]).addClass('end').css('left', e_lft).hide();
      return spine.append(m.start_marker, m.end_marker);
    };
    create_moment_tooltips = function(m) {
      var add_moment_functionality, create_info_box, css_values, produce_collapsed_elem, produce_expanded_elem;
      produce_collapsed_elem = function(m, callback) {
        var key, text, _i, _len, _ref;
        text = '';
        _ref = SETTINGS.structure.title;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          text += m[key] + ':';
        }
        m.collapsed = {};
        m.collapsed.elem = $('<div/ class="info_elem collapsed">').text(text.slice(0, -1));
        return callback(m);
      };
      produce_expanded_elem = function(m) {
        var expanded, href, i, key, keys, link, names, text, _i, _j, _len, _len1, _ref;
        expanded = $('<div/ class="info_elem expanded">');
        text = m.collapsed.elem.text();
        if (Math.max.apply(Math, ((function() {
          var _i, _len, _ref, _results;
          _ref = SETTINGS.structure.extendedTitle;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            _results.push(m[key].slice(0).replace(/\s/g, '').length);
          }
          return _results;
        })())) !== 0) {
          text += ' - ';
          _ref = SETTINGS.structure.extendedTitle;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            text += m[key] + ', ';
          }
          text = text.slice(0, -2);
        }
        m.collapsed.elem.clone().addClass('expanded').css('display', 'block').text(text).appendTo(expanded);
        text = '';
        names = SETTINGS.structure.content.names;
        keys = SETTINGS.structure.content.keys;
        for (i = _j = 0, _len1 = keys.length; _j < _len1; i = ++_j) {
          key = keys[i];
          if (m[key] != null) {
            href = m[key];
            if (typeof m[key] !== 'string') {
              href = 'javascript:void(0)';
            }
            link = $('<a/ class="content_link">').attr({
              'href': href,
              key: key
            }).text(names[i]).appendTo(expanded);
            expanded.html(expanded.html() + ' / ');
          }
        }
        if (expanded.html().slice(-3) === ' / ') {
          expanded.html(expanded.html().slice(0, -3));
        }
        expanded.find('a').each(function() {
          $(this).data('value', m[$(this).attr('key')]);
          switch (typeof $(this).data('value')) {
            case 'string':
              return $(this).bind('click', function(e) {
                return e.stopPropagation();
              });
            case 'object':
              return $(this).bind('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                return $(this).data('value').trigger('click');
              });
          }
        });
        m.expanded = {};
        return m.expanded.elem = expanded;
      };
      css_values = function(elem, info_box) {
        var h, w, _ref;
        info_box.append(elem);
        _ref = [info_box.width(), info_box.height()], w = _ref[0], h = _ref[1];
        elem.hide();
        return {
          w: w,
          h: h
        };
      };
      create_info_box = function(m) {
        var c, e, hover_off, hover_on, i, _ref, _ref1;
        m.info_box = $('<div/ class="info_box">').appendTo(SETTINGS.spine);
        m.spine = SETTINGS.spine;
        _ref = [m.expanded.elem, m.collapsed.elem, m.info_box], e = _ref[0], c = _ref[1], i = _ref[2];
        _ref1 = [css_values(c, i), css_values(e, i)], m.collapsed.css = _ref1[0], m.expanded.css = _ref1[1];
        c.show();
        hover_on = function() {
          m.end_marker.fadeIn(300);
          return m.duration_wire.animate({
            width: m.duration_wire.data('w')
          }, {
            duration: 300
          });
        };
        hover_off = function() {
          m.end_marker.fadeOut(300);
          return m.duration_wire.animate({
            width: 0
          }, {
            duration: 300
          });
        };
        return i.css({
          width: i.width(),
          height: i.height(),
          marginLeft: -i.width() / 2,
          left: SETTINGS.date_to_marker_left_pct(m.start) + '%'
        }).click(function(e) {
          m.is_expanded = !m.is_expanded;
          return layer_moment_tooltips(m.spine);
        }).hover(hover_on, hover_off);
      };
      add_moment_functionality = function(m, spine) {
        m.bottom = function() {
          return this.goal_top + this.get_projected_css().ih_px;
        };
        m.get_projected_css = function() {
          var c, i, ih, iml, iw, left, leftmost, ml_pct, rightmost, spine_width, width_pct, _ref;
          i = (c = this.collapsed);
          if (this.is_expanded) {
            i = this.expanded;
          }
          _ref = [i.css.w, i.css.h, -c.css.w / 2], iw = _ref[0], ih = _ref[1], iml = _ref[2];
          spine_width = parseFloat(this.spine.width());
          ml_pct = 100 * iml / spine_width;
          leftmost = ml_pct + (left = this.spine.data('settings').date_to_marker_left_pct(this.start));
          rightmost = leftmost + (width_pct = 100 * iw / spine_width);
          return {
            l: left,
            iml: iml,
            ih_px: ih,
            ilm: leftmost,
            irm: rightmost,
            iw_pct: width_pct,
            iw_px: iw
          };
        };
        m.remove_end_wires = function() {
          var _ref;
          [m.vertical_end_wire.remove(), m.horizontal_end_wire.remove()];
          return _ref = [null, null], m.vertical_end_wire = _ref[0], m.horizontal_end_wire = _ref[1], _ref;
        };
        m.set_initial_top = function() {
          var css, hs, i, left_index, priority, right_index, top;
          css = this.get_projected_css();
          left_index = Math.floor(((css.ilm - SETTINGS.pct_buffer_for_markers) / SETTINGS.pct_per_interval()) - 1);
          right_index = Math.floor(((css.irm - SETTINGS.pct_buffer_for_markers) / SETTINGS.pct_per_interval()) + 2);
          priority = Math.max.apply(Math, (function() {
            var _i, _len, _ref, _results;
            _ref = SETTINGS.intervals.slice(left_index, +right_index + 1 || 9e9);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              _results.push(i.priority);
            }
            return _results;
          })());
          top = (hs = SETTINGS.initial_heights).down[priority - 1];
          if (this.is_up) {
            top = hs.up[priority - 1] - css.ih_px;
          }
          return m.goal_top = top;
        };
        return m.clash_with = function(m) {
          var h, horizontal, sens, them, us, v, vertical, _ref, _ref1, _ref2;
          sens = SETTINGS.clash_sensitivity;
          vertical = function(us, them) {
            return !((us.t > them.b - sens.v) || (them.t + sens.v > us.b));
          };
          horizontal = function(us, them) {
            return !((us.irm < them.ilm - sens.h) || (them.irm < us.ilm - sens.h));
          };
          _ref = [this.get_projected_css(), m.get_projected_css()], us = _ref[0], them = _ref[1];
          _ref1 = [this.goal_top, this.bottom(), m.goal_top, m.bottom()], us.t = _ref1[0], us.b = _ref1[1], them.t = _ref1[2], them.b = _ref1[3];
          _ref2 = [vertical(us, them), horizontal(us, them)], v = _ref2[0], h = _ref2[1];
          return v && h;
        };
      };
      produce_collapsed_elem(m, produce_expanded_elem);
      create_info_box(m);
      return add_moment_functionality(m, SETTINGS.spine);
    };
    produce_start_wire = function(m) {
      var h, t;
      h = Math.abs((m.goal_top + m.bottom()) / 2);
      t = (m.is_up ? -h : 0);
      return m.start_wire = produce_wire(m, m.start).addClass('vertical start').delay(800).animate({
        height: h,
        top: t
      }, {
        duration: 300
      });
    };
    produce_duration_wire = function(m) {
      var w;
      w = SETTINGS.date_to_marker_left_pct(m.end) - SETTINGS.date_to_marker_left_pct(m.start) + '%';
      return m.duration_wire = produce_wire(m, m.start).addClass('horizontal duration').data('w', w);
    };
    _ref = SETTINGS.moments;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      m = _ref[i];
      create_start_end_markers(m);
      m.is_up = i % 2 === 0;
      create_moment_tooltips(m);
      [m.set_initial_top(), m.info_box.css('top', m.goal_top)];
      produce_start_wire(m);
      produce_duration_wire(m);
    }
    last_index = (infos = $('.info_box')).length - 1;
    return layer_moment_tooltips(spine);
  };

  layer_moment_tooltips = function(spine) {
    var comp, downs, m, ms, place, place_moments, ups, _i, _len, _ref;
    SETTINGS = spine.data('settings');
    place = function(m, fixed, m_css) {
      var adjust_height, clashed, cm;
      adjust_height = function(m, cm) {
        m_css = m.get_projected_css();
        if (m.is_up) {
          return m.goal_top = cm.goal_top - m_css.ih_px - 10;
        } else {
          return m.goal_top = cm.bottom() + 10;
        }
      };
      clashed = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fixed.length; _i < _len; _i++) {
          cm = fixed[_i];
          if (cm.clash_with(m)) {
            _results.push(cm);
          }
        }
        return _results;
      })();
      if (clashed.length !== 0) {
        adjust_height(m, clashed[0]);
        return place(m, fixed);
      } else {
        return m.fixed = true;
      }
    };
    place_moments = function(moments) {
      var fixed, fm, m, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = moments.length; _i < _len; _i++) {
        m = moments[_i];
        fixed = (function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = moments.length; _j < _len1; _j++) {
            fm = moments[_j];
            if (fm.fixed && m !== fm) {
              _results1.push(fm);
            }
          }
          return _results1;
        })();
        _results.push(place(m, fixed, m.get_projected_css()));
      }
      return _results;
    };
    ms = spine.data('settings').moments.slice(0);
    _ref = [[], []], ups = _ref[0], downs = _ref[1];
    for (_i = 0, _len = ms.length; _i < _len; _i++) {
      m = ms[_i];
      [m.set_initial_top(), m.fixed = false];
      (m.is_up ? ups : downs).push(m);
    }
    comp = function(a, b) {
      if (a.is_expanded === b.is_expanded) {
        return a.start - b.start;
      } else if (a.is_expanded) {
        return 1;
      } else {
        return -1;
      }
    };
    [ups.sort(comp), downs.sort(comp)].map(place_moments);
    return animate_moments(SETTINGS.moments, SETTINGS.spine, SETTINGS.spine.parent());
  };

  draw_end_wires = function(m, vh) {
    var animate_vertical, vt, w;
    if (m.is_expanded && (m.horizontal_end_wire == null)) {
      vt = (m.is_up ? vh : 2);
      w = SETTINGS.date_to_marker_left_pct(m.end) - SETTINGS.date_to_marker_left_pct(m.start) + '%';
      m.vertical_end_wire = produce_wire(m, m.end).addClass('vertical end').css('top', vh);
      animate_vertical = function() {
        return m.vertical_end_wire.animate({
          height: Math.abs(vh),
          top: vt
        }, {
          duration: 300
        });
      };
      return m.horizontal_end_wire = produce_wire(m, m.start).delay(300).addClass('horizontal end').css('top', vh).animate({
        width: w
      }, {
        duration: 300,
        complete: function() {
          return animate_vertical();
        }
      });
    }
  };

  animate_moments = function(ms, spine, container) {
    var b, bottom_room, c, css, e, h, height, i, m, t, vh, vt, _i, _len, _ref, _ref1, _ref2;
    for (_i = 0, _len = ms.length; _i < _len; _i++) {
      m = ms[_i];
      _ref = [m.expanded.elem, m.collapsed.elem, m.info_box, null], e = _ref[0], c = _ref[1], i = _ref[2], css = _ref[3];
      if (!(m.is_expanded != null ? m.is_expanded : m.is_expanded = false)) {
        [e.hide(), c.show(), css = m.collapsed.css];
      } else {
        [c.hide(), e.show(), css = m.expanded.css];
      }
      i.animate({
        top: m.goal_top,
        width: css.w,
        height: css.h
      }, {
        duration: 300
      });
      h = (m.goal_top + m.bottom()) / 2;
      _ref1 = (m.is_up ? [h, Math.abs(h)] : [2, Math.abs(h)]), vt = _ref1[0], vh = _ref1[1];
      m.start_wire.animate({
        height: vh,
        top: vt
      }, {
        duration: 300
      });
      if ((m.horizontal_end_wire != null) && m.is_expanded) {
        m.horizontal_end_wire.animate({
          top: h
        }, {
          duration: 300
        });
        m.vertical_end_wire.animate({
          top: vt,
          height: vh
        }, {
          duration: 300
        });
      } else if (m.is_expanded) {
        draw_end_wires(m, h);
      } else if (m.horizontal_end_wire != null) {
        m.remove_end_wires();
      }
    }
    _ref2 = [
      Math.min.apply(Math, (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = ms.length; _j < _len1; _j++) {
          m = ms[_j];
          _results.push(m.goal_top);
        }
        return _results;
      })()), Math.max.apply(Math, (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = ms.length; _j < _len1; _j++) {
          m = ms[_j];
          _results.push(m.bottom());
        }
        return _results;
      })())
    ], t = _ref2[0], b = _ref2[1];
    if (b < 0) {
      b = 0;
    }
    b += 25;
    height = container.height();
    bottom_room = height - parseFloat(spine.css('top'));
    if (1.1 * (b - t) > height) {
      height = 1.1 * (b - t);
      container.animate({
        height: height
      }, {
        duration: 300
      });
    } else {
      container.animate({
        height: 1.1 * (b - t)
      }, {
        duration: 300
      });
    }
    return spine.animate({
      top: 100 * Math.abs(t) / (Math.abs(b) - t) + '%'
    }, {
      duration: 300
    });
  };

  parse_date = function(input) {
    var parts;
    if (input.getDate != null) {
      return new Date(input.getTime());
    }
    parts = input.match(/(\d+)/g);
    return new Date(parts[0], parts[1] - 1, parts[2]);
  };

  month_num_to_name = function(m) {
    return "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Aug,Nov,Dec".split(',')[m];
  };

  make_circle = function(r, c, shadow) {
    var circle, s;
    if (shadow == null) {
      shadow = true;
    }
    s = '0 0 1px black';
    circle = $('<div/ class="circle">').css({
      background: c,
      height: r,
      width: r,
      borderRadius: r,
      '-moz-border-radius': r,
      '-webkit-border-radius': r,
      marginTop: -r / 2,
      marginLeft: -r / 2
    });
    if (shadow) {
      circle.css({
        '-webkit-box-shadow': s,
        '-moz-box-shadow': s,
        'box-shadow': s
      });
    }
    return circle;
  };

  produce_wire = function(m, d) {
    var l;
    l = SETTINGS.date_to_marker_left_pct(d);
    return $('<div/ class="wire">').appendTo(SETTINGS.spine).css('left', l + '%');
  };

  ExercisePageScraper = (function(_super) {
    __extends(ExercisePageScraper, _super);

    function ExercisePageScraper() {
      return ExercisePageScraper.__super__.constructor.apply(this, arguments);
    }

    ExercisePageScraper.prototype.scrape_vars = function() {
      var dates, extract_academic_years, extract_module_exercise_data, extract_start_end_dates, extract_term_title, m, modules, process_exercises_from_cells, process_module_cell, tb, term_title, timetable, _i, _len;
      extract_term_title = function(html) {
        return html.find('tr').eq(0).find('h1').eq(0).text();
      };
      parse_date = function(input) {
        var day, month, year, _ref;
        _ref = input.match(/(\d+)/g), year = _ref[0], month = _ref[1], day = _ref[2];
        return new Date(year, month - 1, day);
      };
      extract_academic_years = function(body) {
        return body.find('h1').text().slice(-9).split('-');
      };
      extract_start_end_dates = function(fullTable, years) {
        var col_buf, day_headers, extract_days, extract_months, first_day, first_month, last_day, last_month, month_to_int, others, year, _i, _j, _ref, _ref1;
        month_to_int = function(m) {
          var i, month, months, rexp, _i, _len;
          months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
          if (m === 'J') {
            return 6;
          }
          rexp = new RegExp(m, 'g');
          for (i = _i = 0, _len = months.length; _i < _len; i = ++_i) {
            month = months[i];
            if (rexp.test(month)) {
              return i + 1;
            }
          }
        };
        extract_months = function(table_row) {
          var c, cell, month_cells, month_ids, month_names, table_headers;
          table_headers = (function() {
            var _i, _len, _ref, _results;
            _ref = table_row.find('th');
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              cell = _ref[_i];
              _results.push($(cell));
            }
            return _results;
          })();
          month_cells = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = table_headers.length; _i < _len; _i++) {
              c = table_headers[_i];
              if (c.attr('bgcolor') === "white") {
                _results.push(c);
              }
            }
            return _results;
          })();
          month_names = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = month_cells.length; _i < _len; _i++) {
              c = month_cells[_i];
              _results.push(c.text().replace(/\s+/g, ''));
            }
            return _results;
          })();
          month_ids = month_names.map(month_to_int);
          return month_ids;
        };
        extract_days = function(table_row) {
          var c, cell, d, days_as_ints, days_text, table_headers, valid_days;
          table_headers = (function() {
            var _i, _len, _ref, _results;
            _ref = table_row.find('th');
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              cell = _ref[_i];
              _results.push($(cell));
            }
            return _results;
          })();
          days_text = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = table_headers.length; _i < _len; _i++) {
              c = table_headers[_i];
              _results.push(c.text());
            }
            return _results;
          })();
          valid_days = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = days_text.length; _i < _len; _i++) {
              d = days_text[_i];
              if (d.replace(/\s+/g, '') !== '') {
                _results.push(d);
              }
            }
            return _results;
          })();
          days_as_ints = valid_days.map(parseFloat);
          return days_as_ints;
        };
        _ref = extract_months($(fullTable).find('tr').eq(0)), first_month = _ref[0], others = 3 <= _ref.length ? __slice.call(_ref, 1, _i = _ref.length - 1) : (_i = 1, []), last_month = _ref[_i++];
        year = first_month < 9 ? years[1] : years[0];
        day_headers = $(fullTable).find('tr').eq(2).find('th');
        col_buf = 0;
        while ($(day_headers[col_buf]).is(":empty")) {
          col_buf += 1;
        }
        _ref1 = extract_days($(fullTable).find('tr').eq(2)), first_day = _ref1[0], others = 3 <= _ref1.length ? __slice.call(_ref1, 1, _j = _ref1.length - 1) : (_j = 1, []), last_day = _ref1[_j++];
        return {
          start: year + '-' + first_month + '-' + first_day,
          end: year + '-' + last_month + '-' + last_day,
          colBufferToFirst: col_buf - 1
        };
      };
      process_module_cell = function(cell) {
        var id, name, _ref;
        _ref = cell.text().split(' - '), id = _ref[0], name = _ref[1];
        return {
          id: id,
          name: name.replace(/^\s+|\s+$/g, ''),
          notesLink: cell.find('a').eq(0).attr('href')
        };
      };
      process_exercises_from_cells = function(module, exercise_cells) {
        var anchor, colSpan, current_date, end, ex_cell, exercise_data, givens, handin, href, hrefs, id, mailto, spec, type, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
        if (exercise_cells == null) {
          return null;
        }
        if (module.exercises == null) {
          module.exercises = [];
        }
        current_date = parse_date(dates.start);
        current_date.setDate(current_date.getDate() - dates.colBufferToFirst);
        _results = [];
        for (_i = 0, _len = exercise_cells.length; _i < _len; _i++) {
          ex_cell = exercise_cells[_i];
          colSpan = parseInt((_ref = $(ex_cell).attr('colspan')) != null ? _ref : 1);
          if (colSpan === NaN) {
            colSpan = 1;
          }
          if (($(ex_cell).attr('bgcolor') != null) && $(ex_cell).find('a').length !== 0) {
            _ref1 = $(ex_cell).find('b').eq(0).text().split(':'), id = _ref1[0], type = _ref1[1];
            hrefs = (function() {
              var _j, _len1, _ref2, _results1;
              _ref2 = $(ex_cell).find('a');
              _results1 = [];
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                anchor = _ref2[_j];
                if ($(anchor).attr('href') != null) {
                  _results1.push($(anchor).attr('href'));
                }
              }
              return _results1;
            })();
            _ref2 = [null, null, null, null], mailto = _ref2[0], spec = _ref2[1], givens = _ref2[2], handin = _ref2[3];
            for (_j = 0, _len1 = hrefs.length; _j < _len1; _j++) {
              href = hrefs[_j];
              if (/mailto/i.test(href)) {
                mailto = href;
              } else if (/SPECS/i.test(href)) {
                spec = href;
              } else if (/given/i.test(href)) {
                givens = href;
              } else if (/handins/i.test(href)) {
                handin = href;
              }
            }
            end = new Date(current_date.getTime());
            end.setDate(end.getDate() + colSpan - 1);
            exercise_data = {
              id: id,
              type: type,
              start: new Date(current_date.getTime()),
              end: end,
              moduleName: module.name,
              name: $(ex_cell).text().slice(id.length + type.length + 2).replace(/^\s+|\s+$/g, ''),
              mailto: mailto,
              spec: spec,
              givens: givens,
              handin: handin
            };
            module.exercises.push(exercise_data);
          }
          _results.push(current_date.setDate(current_date.getDate() + colSpan));
        }
        return _results;
      };
      extract_module_exercise_data = function(fullTable) {
        var allRows, cells, count, cs, current_row, exerciseCells, following_row_count, following_rows, is_module, module_data, module_elem, modules, row, _i, _len;
        is_module = function(elem) {
          return elem.find('font').attr('color') === "blue";
        };
        allRows = $(fullTable).find('tr');
        modules = [];
        count = 0;
        while (count < allRows.length) {
          current_row = allRows[count];
          following_row_count = 0;
          module_elem = $($(current_row).find('td').eq(1));
          if (is_module(module_elem)) {
            module_data = process_module_cell(module_elem);
            following_row_count = $(current_row).find('td').eq(0).attr('rowspan') - 1;
            following_rows = allRows.slice(count + 1, +(count + following_row_count) + 1 || 9e9);
            exerciseCells = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = following_rows.length; _i < _len; _i++) {
                row = following_rows[_i];
                _results.push($(row).find('td').slice(1));
              }
              return _results;
            })();
            exerciseCells.push($(current_row).find('td').slice(4));
            exerciseCells = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = exerciseCells.length; _i < _len; _i++) {
                cs = exerciseCells[_i];
                if (cs != null) {
                  _results.push(cs);
                }
              }
              return _results;
            })();
            for (_i = 0, _len = exerciseCells.length; _i < _len; _i++) {
              cells = exerciseCells[_i];
              process_exercises_from_cells(module_data, cells);
            }
            modules.push(module_data);
          }
          count += following_row_count + 1;
        }
        return modules;
      };
      term_title = extract_term_title(this.html);
      timetable = (function() {
        var _i, _len, _ref, _results;
        _ref = this.html.find('table');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tb = _ref[_i];
          if ($(tb).attr('border') === "0") {
            _results.push(tb);
          }
        }
        return _results;
      }).call(this);
      dates = extract_start_end_dates(timetable, extract_academic_years(this.html));
      modules = extract_module_exercise_data(timetable);
      for (_i = 0, _len = modules.length; _i < _len; _i++) {
        m = modules[_i];
        m.exercises.sort((function(a, b) {
          if (a.start < b.start) {
            return -1;
          } else {
            return 1;
          }
        }));
      }
      return {
        modules: modules,
        start: dates.start,
        end: dates.end,
        term_title: term_title
      };
    };

    return ExercisePageScraper;

  })(PageScraper);

  GivensPageScraper = (function(_super) {
    __extends(GivensPageScraper, _super);

    function GivensPageScraper() {
      return GivensPageScraper.__super__.constructor.apply(this, arguments);
    }

    GivensPageScraper.prototype.scrape_vars = function() {
      var categories;
      categories = [];
      this.html.find('table [cellpadding="3"]').slice(2).each(function() {
        var category, cell, row, rows, _i, _len;
        category = {};
        if ($(this).find('tr').length > 1) {
          category.type = $(this).closest('form').find('h3 font').html().slice(0, -1);
          rows = $(this).find('tr').slice(1);
          category.givens = [];
          for (_i = 0, _len = rows.length; _i < _len; _i++) {
            row = rows[_i];
            if ((cell = $(row).find('td:eq(0) a')).attr('href') != null) {
              category.givens.push({
                title: cell.html(),
                link: cell.attr('href')
              });
            }
          }
          return categories.push(category);
        }
      });
      return categories;
    };

    return GivensPageScraper;

  })(PageScraper);

  GradesPageScraper = (function(_super) {
    __extends(GradesPageScraper, _super);

    function GradesPageScraper() {
      return GradesPageScraper.__super__.constructor.apply(this, arguments);
    }

    GradesPageScraper.prototype.scrape_vars = function() {
      var extract_modules, optional_modules, process_grade_row, process_header_row, required_modules, submissions_completed, submissions_extended, submissions_late, subscription_last_updated;
      process_header_row = function(row) {
        return {
          name: text_extract(row.find('td:eq(0)')),
          term: text_extract(row.find('td:eq(1)')),
          submission: text_extract(row.find('td:eq(2)')),
          level: text_extract(row.find('td:eq(3)')),
          exercises: []
        };
      };
      process_grade_row = function(row) {
        return {
          id: parseInt(text_extract(row.find('td:eq(0)'))),
          type: text_extract(row.find('td:eq(1)')),
          title: text_extract(row.find('td:eq(2)')),
          set_by: text_extract(row.find('td:eq(3)')),
          declaration: text_extract(row.find('td:eq(4)')),
          extension: text_extract(row.find('td:eq(5)')),
          submission: text_extract(row.find('td:eq(6)')),
          grade: text_extract(row.find('td:eq(7)'))
        };
      };
      extract_modules = function(table) {
        var current_module, grade_rows, modules;
        grade_rows = table.find('tr');
        grade_rows = grade_rows.slice(2);
        modules = [];
        current_module = null;
        grade_rows.each(function(i, e) {
          var row_elem, tds;
          row_elem = $(e);
          tds = row_elem.find('td');
          if (tds.length > 1) {
            if ($(tds[0]).attr('colspan')) {
              current_module = process_header_row(row_elem);
              return modules.push(current_module);
            } else {
              return current_module.exercises.push(process_grade_row(row_elem));
            }
          }
        });
        return modules;
      };
      subscription_last_updated = text_extract(this.html.find('table:eq(7) table td:eq(1)'));
      submissions_completed = text_extract(this.html.find('table:eq(7) table td:eq(4)'));
      submissions_extended = text_extract(this.html.find('table:eq(7) table td:eq(6)'));
      submissions_late = text_extract(this.html.find('table:eq(7) table td:eq(8)'));
      required_modules = extract_modules(this.html.find('table:eq(9)'));
      optional_modules = extract_modules(this.html.find('table:eq(-2)'));
      return {
        stats: {
          subscription_last_updated: subscription_last_updated,
          submissions_completed: submissions_completed,
          submissions_extended: submissions_extended,
          submissions_late: submissions_late
        },
        required_modules: required_modules,
        optional_modules: optional_modules
      };
    };

    return GradesPageScraper;

  })(PageScraper);

  MainPageScraper = (function(_super) {
    __extends(MainPageScraper, _super);

    function MainPageScraper() {
      return MainPageScraper.__super__.constructor.apply(this, arguments);
    }

    MainPageScraper.prototype.scrape_vars = function() {
      var available_years, candidate_number, category, cid, current_url, current_user, current_year, default_class, default_period, documentation_link, extensions_link, first_name, grading_schema_link, individual_records_link, keyt, last_name, login, other_func_links, personal_tutor, profile_fields, profile_image_src, projects_portal_link, timetable_url, version;
      current_url = document.URL;
      current_year = current_url.match("keyp=([0-9]+)")[1];
      current_user = current_url.match("[0-9]+:(.*)")[1];
      version = this.html.find('table:first td:first').text();
      profile_image_src = this.html.find('table:eq(2) table:eq(1) tr:eq(0) img').attr('src');
      profile_fields = this.html.find('table:eq(2) table:eq(1) tr:eq(1) td').map(function(i, e) {
        return $(e).text();
      });
      first_name = profile_fields[0];
      last_name = profile_fields[1];
      login = profile_fields[2];
      category = profile_fields[3];
      candidate_number = profile_fields[4];
      cid = profile_fields[5];
      personal_tutor = profile_fields[6];
      available_years = this.html.find('select[name=newyear] option').map(function(index, elem) {
        elem = $(elem);
        return {
          text: elem.html(),
          href: elem.attr('value')
        };
      });
      available_years = available_years.slice(1);
      other_func_links = this.html.find('table:eq(2) table:eq(9) tr td:nth-child(3) a').map(function(index, elem) {
        return $(elem).attr('href');
      });
      grading_schema_link = other_func_links[0];
      documentation_link = other_func_links[1];
      extensions_link = other_func_links[2];
      projects_portal_link = other_func_links[3];
      individual_records_link = other_func_links[4];
      default_class = this.html.find('input[name=class]:checked').val();
      default_period = this.html.find('input[name=period]:checked').val();
      keyt = this.html.find('input[type=hidden]').val();
      timetable_url = '/timetable.cgi?period=' + default_period + '&class=' + default_class + '&keyt=' + keyt;
      return {
        current_url: current_url,
        current_year: current_year,
        current_user: current_user,
        version: version,
        profile_image_src: profile_image_src,
        first_name: first_name,
        last_name: last_name,
        login: login,
        category: category,
        candidate_number: candidate_number,
        cid: cid,
        personal_tutor: personal_tutor,
        available_years: available_years,
        grading_schema_link: grading_schema_link,
        documentation_link: documentation_link,
        extensions_link: extensions_link,
        projects_portal_link: projects_portal_link,
        individual_records_link: individual_records_link,
        default_class: default_class,
        default_period: default_period,
        keyt: keyt,
        timetable_url: timetable_url
      };
    };

    return MainPageScraper;

  })(PageScraper);

  NotesPageScraper = (function(_super) {
    __extends(NotesPageScraper, _super);

    function NotesPageScraper() {
      return NotesPageScraper.__super__.constructor.apply(this, arguments);
    }

    NotesPageScraper.prototype.scrape_vars = function() {
      var notes, row, _i, _len, _ref;
      notes = [];
      _ref = this.get_note_rows(this.html);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        notes.push({
          type: this.get_note_type(row),
          title: this.get_note_title(row),
          link: this.get_note_link(row)
        });
      }
      return {
        notes: notes
      };
    };

    NotesPageScraper.prototype.get_note_rows = function(html) {
      var r, rows, _i, _len, _ref, _results;
      rows = html.find('table [cellpadding="3"] tr');
      _ref = rows.slice(3);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        _results.push($(r));
      }
      return _results;
    };

    NotesPageScraper.prototype.get_note_type = function(row) {
      var link;
      link = $(row.find('td:eq(1) a'));
      if (this.link_is_local(link)) {
        return "resource";
      } else if (this.link_is_remote(link)) {
        return "url";
      }
    };

    NotesPageScraper.prototype.get_note_title = function(row) {
      var note_title;
      return note_title = row.find('td:eq(1)').text();
    };

    NotesPageScraper.prototype.get_note_link = function(row) {
      var identifier, link;
      link = $(row.find('td:eq(1) a'));
      if (this.link_is_local(link)) {
        return link.attr('href');
      } else if (this.link_is_remote(link)) {
        identifier = link.attr('onclick').match(/clickpage\((.*)\)/)[1];
        return "showfile.cgi?key=2012:3:" + identifier + ":c3:NOTES:peh10";
      }
      return null;
    };

    NotesPageScraper.prototype.link_is_local = function(link) {
      return (link.attr('href') != null) && link.attr('href') !== '';
    };

    NotesPageScraper.prototype.link_is_remote = function(link) {
      return link.attr('onclick') != null;
    };

    return NotesPageScraper;

  })(PageScraper);

  PageScraper = (function() {
    function PageScraper(html) {
      this.html = html;
    }

    PageScraper.prototype.scrape_vars = function() {
      throw ".scrape method of PageScraper should be overriden!";
    };

    return PageScraper;

  })();

  DashboardPopulator = (function(_super) {
    __extends(DashboardPopulator, _super);

    function DashboardPopulator() {
      return DashboardPopulator.__super__.constructor.apply(this, arguments);
    }

    DashboardPopulator.prototype.populate = function(vars) {
      var period;
      this.html.find('#cc-identity-profile-image').attr('src', vars.profile_image_src);
      this.html.find('#cc-identity-first-name').html(vars.first_name);
      this.html.find('#cc-identity-last-name').html(vars.last_name);
      this.html.find('#cc-identity-login').html(vars.login);
      this.html.find('#cc-identity-category').html(vars.category);
      this.html.find('#cc-identity-candidate-number').html(vars.candidate_number);
      this.html.find('#cc-identity-cid').html(vars.cid);
      this.html.find('#cc-identity-personal-tutor').html(vars.personal_tutor);
      this.html.find('#cc-other-projects-portal').attr('href', vars.projects_portal_link);
      this.html.find('#cc-other-extensions').attr('href', vars.extensions_link);
      this.html.find('#cc-other-documentation').attr('href', vars.documentation_link);
      this.html.find('#class-selector li').bind('click', (function(_this) {
        return function() {
          return _this.html.find('#current-class').text($(_this).text()).attr('value', $(_this).find('a').attr('value'));
        };
      })(this));
      this.html.find('#ex-go-btn').data('keyt', vars.keyt);
      this.html.find('#ex-go-btn').bind('click', (function(_this) {
        return function() {
          var c, kt, p, url;
          p = _this.html.find('#term-selector .active').attr('value');
          c = _this.html.find('#current-class').attr('value');
          kt = $(_this).data('keyt');
          url = "/timetable.cgi?period=" + p + "&class=" + c + "&keyt=" + kt;
          return load_exercises_page(null, null, null, url);
        };
      })(this));
      if ((period = parseInt(vars.default_period)) % 2 === 0) {
        period = period - 1;
      }
      this.html.find('#current-class').attr('value', vars.default_class);
      this.html.find('#class-selector a').each((function(_this) {
        return function() {
          if ($(_this).attr('value') === vars.default_class) {
            return _this.html.find('#current-class').text($(_this).text());
          }
        };
      })(this));
      return this.html.find('#term-selector .btn').each(function() {
        if ($(this).attr('value') === period.toString()) {
          return $(this).addClass('active');
        }
      });
    };

    return DashboardPopulator;

  })(PagePopulator);

  ExercisePopulator = (function(_super) {
    __extends(ExercisePopulator, _super);

    function ExercisePopulator(html, vars) {
      ExercisePopulator.__super__.constructor.call(this, html, vars);
    }

    ExercisePopulator.prototype.populate = function(vars) {
      var el, exercise, m, module, module_header, module_table, note_link, populator, row, _i, _j, _len, _len1, _ref, _ref1;
      this.html.find('#term_title').text('Timetable - ' + vars.term_title);
      _ref = vars.modules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        module = _ref[_i];
        module_header = $("<h3>" + module.id + " - " + module.name + "</h3>");
        if (module.notesLink != null) {
          note_link = $('<a/>').attr('href', module.notesLink).html('Notes').data('module_title', module_header.text());
          note_link.bind('click', (function(_this) {
            return function(e) {
              var url;
              e.preventDefault();
              url = $(e.target).attr('href');
              console.log("Notes for " + url);
              _this.html.find('#active_note').removeAttr('id');
              $(e.target).attr('id', 'active_note');
              return load_cate_page(url, function(body) {
                var notes_data, populator, scraper;
                scraper = new NotesPageScraper(body);
                populator = new NotesPopulator(_this.html.find('#notes-modal'));
                notes_data = scraper.scrape_vars();
                notes_data.title = _this.html.find('#active_note').data('module_title');
                populator.populate(notes_data);
                return $("#notes-modal").modal('show');
              });
            };
          })(this));
          module_header.append(" - ").append(note_link);
        }
        this.html.append(module_header);
        if (module.exercises.length > 0) {
          module_table = this.html.find('#exercises_table');
          module_table = this.html.find('#exercises_template').clone();
          module_table.removeClass('hidden');
          _ref1 = module.exercises;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            exercise = _ref1[_j];
            row = this.html.find('#exercise_row_template').clone();
            row.removeClass('hidden').appendTo(module_table);
            populator = new ExerciseRowPopulator(row);
            populator.populate(exercise);
          }
          this.html.append(module_table);
        }
      }
      if ((typeof modules === "undefined" || modules === null) || Math.max.apply(Math, ((function() {
        var _k, _len2, _ref2, _results;
        _ref2 = vars.modules;
        _results = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          m = _ref2[_k];
          _results.push(m.exercises.length);
        }
        return _results;
      })())) <= 0) {
        el = $('<div/>');
        el.css({
          textAlign: 'center',
          paddingTop: '50px',
          paddingBottom: '50px'
        });
        el.append($('<div/ class="well">').append("<h4>There's no handins here!</h4>"));
        this.html.find('#page-content').append(el);
      }
      if (vars.period !== 1) {
        this.html.find('#back_term_btn').bind('click', function(e) {
          return load_exercises_page(e, vars.period - 1);
        });
      } else {
        this.html.find('#back_term_btn').addClass('disabled');
      }
      if (vars.period !== 6) {
        return this.html.find('#next_term_btn').bind('click', function(e) {
          return load_exercises_page(e, vars.period + 1);
        });
      } else {
        return this.html.find('#next_term_btn').addClass('disabled');
      }
    };

    return ExercisePopulator;

  })(PagePopulator);

  ExerciseRowPopulator = (function(_super) {
    __extends(ExerciseRowPopulator, _super);

    function ExerciseRowPopulator() {
      return ExerciseRowPopulator.__super__.constructor.apply(this, arguments);
    }

    ExerciseRowPopulator.prototype.format_date = function(d) {
      var pad;
      pad = function(a, b) {
        return (1e15 + a + "").slice(-b);
      };
      return pad(d.getDate(), 2) + '/' + pad(d.getMonth() + 1, 2) + '/' + d.getFullYear();
    };

    ExerciseRowPopulator.prototype.populate = function(exercise) {
      var due_text, givens_cell, handin_anchor, id_cell, name_cell, spec_cell;
      id_cell = this.html.find('.id');
      if (exercise.handin != null) {
        id_cell.html('');
        handin_anchor = $('<a/>').attr('href', exercise.handin).html('Hand in').appendTo(id_cell);
        if (exercise.end > (new Date())) {
          handin_anchor.addClass('handin_link btn btn-primary');
        } else {
          handin_anchor.addClass('btn btn-danger late_handin');
        }
      } else {
        id_cell.html('{' + exercise.id + ':' + exercise.type + '}');
      }
      if (/\S/.test(exercise.name)) {
        name_cell = this.html.find('td.name');
        name_cell.text(exercise.name);
      }
      this.html.find('td.set').text(this.format_date(exercise.start));
      due_text = this.format_date(exercise.end);
      this.html.find('td.due').text(due_text);
      this.html.find('td.due').text;
      if (exercise.spec != null) {
        spec_cell = this.html.find('.spec');
        spec_cell.text('');
        $('<a/>').attr('href', exercise.spec).html('Spec Link').appendTo(spec_cell);
      }
      if (exercise.givens != null) {
        givens_cell = this.html.find('.given');
        givens_cell.text('');
        return $('<a/>').attr('href', exercise.givens).html('Givens').appendTo(givens_cell).data('exercise_title', this.html.find('.name').text()).bind('click', (function(_this) {
          return function(e) {
            var url;
            e.preventDefault();
            url = $(_this).attr('href');
            _this.html.find('#active_given').removeAttr('id');
            $(_this).attr('id', 'active_given');
            return load_cate_page(url, function(body) {
              var givens_data;
              givens_data = extract_givens_page_data(body);
              return $('#givens-modal').modal('show');
            });
          };
        })(this));
      }
    };

    return ExerciseRowPopulator;

  })(PagePopulator);

  GivensPopulator = (function(_super) {
    __extends(GivensPopulator, _super);

    function GivensPopulator() {
      return GivensPopulator.__super__.constructor.apply(this, arguments);
    }

    GivensPopulator.prototype.populate = function() {
      var category, given, givens_header, givens_table, head, i, row, tbody, _i, _j, _len, _len1, _ref, _ref1, _results;
      givens_header = this.html.find('#givens-modal-header');
      givens_header.find('h3').remove();
      givens_header.append("<h3>" + this.vars.header + "</h3>");
      givens_table = this.html.find('#givens-table');
      givens_table.html('');
      _ref = this.vars;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        category = _ref[_i];
        head = this.html.find('<thead/>').append($("<tr><th colspan='2'><h4>" + category.type + "</h4></th></tr>"));
        head.append(this.html.find('<tr><th class="id">ID</th><th>Link</th></tr>'));
        tbody = this.html.find('<tbody/>');
        _ref1 = category.givens;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          given = _ref1[i];
          row = this.html.find('<tr/>');
          row.append("<td>" + (i + 1) + "</td>");
          row.append("<td><a href='" + given.link + "'>" + given.title + "</a></td>");
          tbody.append(row);
        }
        givens_table.append(head);
        _results.push(givens_table.append(tbody));
      }
      return _results;
    };

    return GivensPopulator;

  })(PagePopulator);

  GradesPopulator = (function(_super) {
    __extends(GradesPopulator, _super);

    function GradesPopulator() {
      return GradesPopulator.__super__.constructor.apply(this, arguments);
    }

    GradesPopulator.prototype.populate = function(vars) {
      this.html.find('#cc-subscription-updated').html(vars.stats.subscription_last_updated);
      this.html.find('#cc-submissions-completed').html(vars.stats.submissions_completed);
      this.html.find('#cc-submissions-extended').html(vars.stats.submissions_extended);
      this.html.find('#cc-submissions-late').html(vars.stats.submissions_late);
      $(vars.required_modules).each((function(_this) {
        return function(i, module) {
          return _this.html.find('#cc-required-modules').append(_this.render_module(module));
        };
      })(this));
      return $(vars.optional_modules).each((function(_this) {
        return function(i, module) {
          return _this.html.find('#cc-optional-modules').append(_this.render_module(module));
        };
      })(this));
    };

    GradesPopulator.prototype.grade_to_class = function(grade) {
      switch (grade) {
        case "A*":
        case "A+":
        case "A":
          return "progress-success";
        case "B":
          return "progress-info";
        case "C":
        case "D":
          return "progress-warning";
        case "E":
        case "F":
          return "progress-danger";
      }
    };

    GradesPopulator.prototype.grade_to_width = function(grade) {
      var width;
      width = (function() {
        switch (grade) {
          case "A*":
            return 100;
          case "A+":
            return 90;
          case "A":
            return 80;
          case "B":
            return 70;
          case "C":
            return 60;
          case "D":
            return 50;
          case "E":
            return 40;
          case "F":
            return 30;
          default:
            return 0;
        }
      })();
      return "" + width + "%";
    };

    GradesPopulator.prototype.render_module = function(module) {
      var grades_table, module_elem;
      module_elem = this.html.find('#module_template .row').clone();
      module_elem.find('.module-title').html(module.name);
      grades_table = module_elem.find('.module-grades');
      if (module.exercises.length === 0) {
        grades_table.append($('<tr><td colspan="8">No exercises for this module.</td></tr>'));
      } else {
        $(module.exercises).each((function(_this) {
          return function(i, exercise) {
            var exercise_elem;
            exercise_elem = _this.html.find('#exercise_template tr').clone();
            exercise_elem.find('.exercise-id').html(exercise.id);
            exercise_elem.find('.exercise-type').html(exercise.type);
            exercise_elem.find('.exercise-title').html(exercise.title);
            exercise_elem.find('.exercise-set-by').html(exercise.set_by);
            exercise_elem.find('.exercise-declaration').html(exercise.declaration);
            exercise_elem.find('.exercise-extension').html(exercise.extension);
            exercise_elem.find('.exercise-submission').html(exercise.submission);
            switch (exercise.grade) {
              case "":
                exercise_elem.find('.exercise-grade-container').html("No Record");
                break;
              case "n/a":
                exercise_elem.find('.exercise-grade-container').html('<i class="icon-legal" /> Awaiting Marking');
                break;
              case "N/P":
                exercise_elem.find('.exercise-grade-container').html('<i class="icon-lock" /> Marked, Not Published');
                break;
              default:
                exercise_elem.find('.progress').addClass(_this.grade_to_class(exercise.grade));
                exercise_elem.find('.progress .bar').css('width', _this.grade_to_width(exercise.grade));
                exercise_elem.find('.exercise-grade').html(exercise.grade);
            }
            return grades_table.append(exercise_elem);
          };
        })(this));
      }
      return module_elem;
    };

    return GradesPopulator;

  })(PagePopulator);

  LayoutPopulator = (function(_super) {
    __extends(LayoutPopulator, _super);

    function LayoutPopulator() {
      return LayoutPopulator.__super__.constructor.apply(this, arguments);
    }

    LayoutPopulator.prototype.populate = function(vars) {
      this.html.find('#cc-version').html(vars.version);
      this.html.find('#nav-dashboard').attr('href', vars.current_url);
      this.html.find('#nav-exercises').attr('href', vars.timetable_url);
      this.html.find('#nav-grades').attr('href', vars.individual_records_link);
      this.html.find('#cc-current-year').html("(" + vars.current_year + ")");
      vars.available_years.each((function(_this) {
        return function(i, val) {
          var li;
          li = '<li><a href="' + val.href + '">' + val.text.replace('-', ' - ') + '</a></li>';
          return _this.html.find('#cc-year-dropdown').append(li);
        };
      })(this));
      if (window.classy_cate_script_version !== CLASSY_CATE_SCRIPT_VERSION) {
        this.html.find('#page-content').before('<div class="alert alert-error">' + '  Your Classy-CATE script is out of date! ' + '  <a href="http://classy-cate.herokuapp.com/classy-cate.user.js">' + '    Click Here' + '  </a>' + '  to update to Classy CATE v' + CLASSY_CATE_SCRIPT_VERSION + '</div>');
      }
      this.html.find('#nav-dashboard').bind('click', load_dashboard_page);
      this.html.find('#nav-exercises').bind('click', load_exercises_page);
      this.html.find('#nav-grades').bind('click', load_grades_page);
      return this.html.find('#old-cate-button').bind('click', activate_nostalgia_mode);
    };

    return LayoutPopulator;

  })(PagePopulator);

  NotesPopulator = (function(_super) {
    __extends(NotesPopulator, _super);

    function NotesPopulator() {
      return NotesPopulator.__super__.constructor.apply(this, arguments);
    }

    NotesPopulator.prototype.populate = function(notes_data) {
      var i, note, notes_body, notes_header, row, _i, _len, _ref, _results;
      notes_header = this.html.find('#notes-modal-header');
      notes_header.find('h3').remove();
      notes_header.append("<h3>" + notes_data.title + "</h3>");
      notes_body = this.html.find('#notes-modal-tbody');
      notes_body.html('');
      _ref = notes_data.notes;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        note = _ref[i];
        row = $('<tr/>');
        row.append("<td>" + (i + 1) + "</td>");
        if (note.type === "url") {
          row.append("<td><a href='" + note.link + "' target='_blank'>" + note.title + "</a></td>");
        } else {
          row.append("<td><a href='" + note.link + "'>" + note.title + "</a></td>");
        }
        _results.push(notes_body.append(row));
      }
      return _results;
    };

    return NotesPopulator;

  })(PagePopulator);

  PagePopulator = (function() {
    function PagePopulator(html, vars) {
      this.html = html;
    }

    PagePopulator.prototype.populate = function(vars) {
      throw ".populate method of PagePopulator should be overriden!";
    };

    return PagePopulator;

  })();

}).call(this);
